You are a senior full-stack developer and content strategist tasked with restructuring a React landing page for CloudGlance - an AI-powered document intelligence platform. 

## TASK OVERVIEW
Analyze the content.md file in this directory and automatically identify all sections that need to be converted into JSON files. Create a new content structure in `/public/content/new_content/` folder with properly structured JSON files that match the existing React component architecture.

## CURRENT REPO STRUCTURE UNDERSTANDING
- The repo uses React + TypeScript with Vite
- Content is managed via JSON files in `/public/content/`
- Each section has its own JSON file (hero.json, features.json, navbar.json, etc.)
- Components dynamically load content from these JSON files
- The site uses Framer Motion for animations and CSS Modules for styling

## YOUR INSTRUCTIONS

1. **ANALYZE content.md COMPLETELY** - Go through the entire markdown file and identify all major sections
2. **CREATE CORRESPONDING JSON FILES** - For each section you identify, create an appropriately named JSON file
3. **FOLLOW EXISTING PATTERNS** - Look at the structure and naming conventions used in the current `/public/content/` files
4. **ADD OR REPLACE** - These new JSON files will either be added to existing content or replace files with similar names

## JSON STRUCTURE REQUIREMENTS

For each section you create, include:
```json
{
  "sectionHeader": {
    "title": "[Extract main title]",
    "subtitle": "[Extract subtitle if present]"
  },
  "content": {
    // Section-specific content structure
  },
  "presentation": {
    "style": "[suggest UI style: tabs, accordion, grid, etc.]",
    "layout": "[suggest layout: horizontal, vertical, cards, etc.]",
    "animations": true
  }
}
```

## ADDITIONAL REQUIREMENTS

### Data Extraction Rules:
1. **Preserve all key metrics and statistics** from content.md
2. **Maintain the professional, confident tone** throughout
3. **Extract exact quotes and testimonials** where present
4. **Keep technical terms** like "RAG", "SOC 2", etc. exactly as written
5. **Preserve all CTAs** and button text exactly
6. **Maintain hierarchy** - main headlines, subheadings, bullet points

### JSON Structure Standards:
- Use camelCase for all property names
- Include "sectionHeader" object for each main section
- Add "presentation" metadata for UI styling hints
- Include "enabled" flags for optional features
- Use arrays for repeating elements
- Add semantic "id" fields for referencing

### Content Processing Guidelines:
- **Icons**: Suggest appropriate Feather/Lucide icon names
- **Animations**: Specify animation types (fadeIn, slideUp, etc.)
- **Layout**: Include layout hints (grid, stack, tabs, etc.) 
- **Responsive**: Consider mobile-first content structure
- **Performance**: Keep JSON files focused and lightweight

### Icon and Animation Suggestions:
- Icons: Use semantic names (upload, zap, shield, users, settings, etc.)
- Animations: fadeIn, slideUp, slideInLeft, staggerChildren, bounce, etc.
- Layouts: grid, flex, stack, tabs, accordion, carousel, split, etc.

## FILE NAMING CONVENTION

Name your JSON files descriptively based on the section content:
- `hero_new.json` - for hero/landing section
- `comparison_new.json` - for before/after comparisons  
- `features_new.json` - for product features
- `workflow_new.json` - for process/workflow diagrams
- `technology_new.json` - for technical explanations
- `solutions_new.json` - for role-based solutions
- `testimonials_new.json` - for case studies/testimonials
- `faq_new.json` - for frequently asked questions
- `contact_new.json` - for contact/CTA sections
- `[descriptive-name]_new.json` - for any other sections you identify

### Validation Checklist:
- [ ] All JSON files are valid (no trailing commas, proper quotes)
- [ ] All content from content.md is captured
- [ ] Consistent naming conventions used
- [ ] Proper nesting and data types
- [ ] Metadata for UI components included
- [ ] No hardcoded styling in content

## OUTPUT STRUCTURE

Create files in `/public/content/new_content/` with this structure:
```
/public/content/new_content/
├── [section1]_new.json
├── [section2]_new.json
├── [section3]_new.json
└── [etc...]_new.json
```

## FINAL INSTRUCTIONS

1. **READ content.md in its entirety first**
2. **IDENTIFY all distinct sections** that need their own JSON files
3. **CREATE appropriately structured JSON** for each section
4. **ENSURE completeness** - every piece of content should be preserved
5. **ADD helpful metadata** for the React developers
6. **DOCUMENT your decisions** - briefly explain your section breakdown choices

The goal is to have production-ready JSON files that can immediately enhance the existing content structure while supporting modern React component patterns. Focus on accuracy, completeness, and developer-friendly structure.
